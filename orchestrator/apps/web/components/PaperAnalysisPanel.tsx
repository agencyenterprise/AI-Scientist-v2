import type { PaperAnalysis } from "@/lib/schemas/analysis"

export function PaperAnalysisPanel({ analysis }: { analysis: PaperAnalysis }) {
  return (
    <div className="space-y-6">
      <section>
        <header className="flex flex-col gap-1">
          <h3 className="text-sm font-semibold text-slate-200">Quantitative review</h3>
          <p className="text-xs text-slate-500">Generated by {analysis.models.quantitative}</p>
        </header>
        <div className="mt-3 grid gap-3 text-sm text-slate-200">
          {renderScore("Overall score", analysis.quantitative.overallScore)}
          {renderScoreDetail("Quality", analysis.quantitative.quality)}
          {renderScoreDetail("Faithfulness", analysis.quantitative.faithfulnessToOriginal)}
          {renderScoreDetail("Innovation", analysis.quantitative.innovationIndex)}
          {analysis.quantitative.computationalEfficiencyGain && (
            <div className="rounded border border-slate-800 bg-slate-900/40 p-3">
              <h4 className="text-xs font-semibold uppercase tracking-wide text-slate-400">Efficiency gain</h4>
              <ul className="mt-2 space-y-1 text-xs text-slate-300">
                {analysis.quantitative.computationalEfficiencyGain.tokensPerSecond && (
                  <li>Tokens/sec: {analysis.quantitative.computationalEfficiencyGain.tokensPerSecond.toLocaleString()}</li>
                )}
                {analysis.quantitative.computationalEfficiencyGain.relativeGainVsBaseline && (
                  <li>Gain vs baseline: {analysis.quantitative.computationalEfficiencyGain.relativeGainVsBaseline}</li>
                )}
                {analysis.quantitative.computationalEfficiencyGain.nmseExactness && (
                  <li>NMSE: {analysis.quantitative.computationalEfficiencyGain.nmseExactness}</li>
                )}
                {analysis.quantitative.computationalEfficiencyGain.memorySavingsEstimated && (
                  <li>Memory savings: {analysis.quantitative.computationalEfficiencyGain.memorySavingsEstimated}</li>
                )}
                {analysis.quantitative.computationalEfficiencyGain.rationale && (
                  <li className="text-slate-400">{analysis.quantitative.computationalEfficiencyGain.rationale}</li>
                )}
              </ul>
            </div>
          )}
          {analysis.quantitative.empiricalSuccess && (
            <div className="rounded border border-slate-800 bg-slate-900/40 p-3 text-xs text-slate-300">
              <h4 className="text-xs font-semibold uppercase tracking-wide text-slate-400">Empirical success</h4>
              <div className="mt-2 grid gap-2 sm:grid-cols-3">
                <div>
                  <div className="text-slate-400">Datasets with improvement</div>
                  <div>{analysis.quantitative.empiricalSuccess.datasetsWithImprovement ?? "—"}</div>
                </div>
                <div>
                  <div className="text-slate-400">Datasets tested</div>
                  <div>{analysis.quantitative.empiricalSuccess.datasetsTested ?? "—"}</div>
                </div>
                <div>
                  <div className="text-slate-400">Success rate</div>
                  <div>{formatPercentage(analysis.quantitative.empiricalSuccess.successRate)}</div>
                </div>
              </div>
              {analysis.quantitative.empiricalSuccess.rationale && (
                <p className="mt-2 text-slate-400">{analysis.quantitative.empiricalSuccess.rationale}</p>
              )}
            </div>
          )}
        </div>
      </section>
      <section>
        <header className="flex flex-col gap-1">
          <h3 className="text-sm font-semibold text-slate-200">Qualitative synthesis</h3>
          <p className="text-xs text-slate-500">Generated by {analysis.models.qualitative}</p>
        </header>
        <div className="mt-3 space-y-4 text-sm text-slate-200">
          {analysis.qualitative.tradeoffsMade && (
            <div className="space-y-2">
              <h4 className="text-xs font-semibold uppercase tracking-wide text-slate-400">Trade-offs</h4>
              <ul className="space-y-2 text-xs text-slate-300">
                {Object.entries(analysis.qualitative.tradeoffsMade).map(([key, value]) => (
                  <li key={key}>
                    <span className="font-medium text-slate-200">{key}:</span> {value}
                  </li>
                ))}
              </ul>
            </div>
          )}
          {analysis.qualitative.experimentProven && (
            <div className="space-y-2 text-xs text-slate-300">
              <h4 className="text-xs font-semibold uppercase tracking-wide text-slate-400">Experiment outcome</h4>
              {analysis.qualitative.experimentProven.hypothesis && (
                <p>Hypothesis: {analysis.qualitative.experimentProven.hypothesis}</p>
              )}
              {analysis.qualitative.experimentProven.evidence && (
                <p>Evidence: {analysis.qualitative.experimentProven.evidence}</p>
              )}
              {analysis.qualitative.experimentProven.limitations && (
                <p>Limitations: {analysis.qualitative.experimentProven.limitations}</p>
              )}
              {analysis.qualitative.experimentProven.proven !== undefined && (
                <p>Status: {analysis.qualitative.experimentProven.proven ? "Proven" : "Not proven"}</p>
              )}
            </div>
          )}
          {analysis.qualitative.conclusion && (
            <div className="space-y-2 text-xs text-slate-300">
              <h4 className="text-xs font-semibold uppercase tracking-wide text-slate-400">Conclusion</h4>
              {analysis.qualitative.conclusion.summary && (
                <p>Summary: {analysis.qualitative.conclusion.summary}</p>
              )}
              {analysis.qualitative.conclusion.implications && (
                <p>Implications: {analysis.qualitative.conclusion.implications}</p>
              )}
              {analysis.qualitative.conclusion.authorsPosition && (
                <p>Authors position: {analysis.qualitative.conclusion.authorsPosition}</p>
              )}
            </div>
          )}
          {analysis.qualitative.methodologicalNovelty && (
            <p className="text-xs text-slate-300">
              <span className="font-semibold text-slate-200">Methodological novelty:</span> {analysis.qualitative.methodologicalNovelty}
            </p>
          )}
          {analysis.qualitative.recommendations && analysis.qualitative.recommendations.length > 0 && (
            <div className="space-y-2 text-xs text-slate-300">
              <h4 className="text-xs font-semibold uppercase tracking-wide text-slate-400">Recommendations</h4>
              <ul className="list-disc space-y-1 pl-5">
                {analysis.qualitative.recommendations.map((item) => (
                  <li key={item}>{item}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </section>
    </div>
  )
}

function renderScore(label: string, score?: number) {
  if (score === undefined) {
    return null
  }
  return (
    <div className="rounded border border-slate-800 bg-slate-900/40 p-3 text-xs text-slate-300">
      <div className="flex items-center justify-between">
        <span className="uppercase tracking-wide text-slate-400">{label}</span>
        <span className="text-lg font-semibold text-slate-100">{score.toFixed(1)}</span>
      </div>
    </div>
  )
}

function renderScoreDetail(label: string, detail?: { score?: number; rationale?: string; criteria?: Record<string, number> }) {
  if (!detail) {
    return null
  }
  return (
    <div className="rounded border border-slate-800 bg-slate-900/40 p-3 text-xs text-slate-300">
      <div className="flex items-center justify-between">
        <span className="uppercase tracking-wide text-slate-400">{label}</span>
        <span className="text-lg font-semibold text-slate-100">
          {detail.score !== undefined ? detail.score.toFixed(1) : "—"}
        </span>
      </div>
      {detail.criteria && (
        <ul className="mt-2 space-y-1">
          {Object.entries(detail.criteria).map(([key, value]) => (
            <li key={key} className="flex justify-between">
              <span className="text-slate-400">{key}</span>
              <span>{value.toFixed(1)}</span>
            </li>
          ))}
        </ul>
      )}
      {detail.rationale && <p className="mt-2 text-slate-400">{detail.rationale}</p>}
    </div>
  )
}

function formatPercentage(value?: number) {
  if (value === undefined) {
    return "—"
  }
  return `${(value * 100).toFixed(0)}%`
}
